@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>SampleData</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
        {
            FirstName = "Ignacio",
            LastName = "Gunst",
            EmailAdress = "ignacio@test.com",
            DisplayName = "Sample Ignacio",
            ObjectIdentifier = "abc-123"
        };

        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthenticationAsync("abc-123");
        var categories = await categoryData.GetCategoriesAsync();
        var statuses = await statusData.GetStatuses();

        SuggestionModel suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[0],
            Suggestion = "Our first suggestion",
            Description = "This is a suggestion created by the sample data generation method"
        };

        await suggestionData.CreateSuggestion(suggestion);
        
        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[1],
            Suggestion = "Our second suggestion",
            Description = "This is a suggestion created by the sample data generation method",
            SuggestionStatus = statuses[0],
            OwnerNotes = "This is the note for the status"
        };

        await suggestionData.CreateSuggestion(suggestion);
        
        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[2],
            Suggestion = "Our third suggestion",
            Description = "This is a suggestion created by the sample data generation method",
            SuggestionStatus = statuses[1],
            OwnerNotes = "This is the note for the status"
        };

        await suggestionData.CreateSuggestion(suggestion);
        
        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[3],
            Suggestion = "Our fourth suggestion",
            Description = "This is a suggestion created by the sample data generation method",
            SuggestionStatus = statuses[2],
            OwnerNotes = "This is the note for the status"
        };

        await suggestionData.CreateSuggestion(suggestion);
        
        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[4],
            Suggestion = "Our fifth suggestion",
            Description = "This is a suggestion created by the sample data generation method",
            SuggestionStatus = statuses[3],
            OwnerNotes = "This is the note for the status"
        };

        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetCategoriesAsync();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "Full paid courses."
        };

        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Dev Questions",
            CategoryDescription = "Advice on being developer."
        };

        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "In-Depth tutorials",
            CategoryDescription = "A deep-dive video on how to use a topic."
        };

        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "10-Minute Training",
            CategoryDescription = "A quick \"How do I use this?\"."
        };

        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Other",
            CategoryDescription = "Not sure where this fits."
        };

        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
        {
            StatusName = "Completed",
            StatusDescription = "The suggestion was accepted and the corresponding item was created."
        };

        await statusData.CreateStatus(stat);

        stat = new StatusModel()
        {
            StatusName = "Watching",
            StatusDescription = "The suggestion is interesting. We are watching to see how much interest there is in it."
        };

        await statusData.CreateStatus(stat);

        stat = new StatusModel()
        {
            StatusName = "Upcoming",
            StatusDescription = "The suggestion was accepted and it will be released soon."
        };

        await statusData.CreateStatus(stat);

        stat = new StatusModel()
        {
            StatusName = "Dismissed",
            StatusDescription = "The suggestion was not something that we are going to undertake."
        };

        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }

}